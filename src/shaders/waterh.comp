#version 440 core

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, rg32f) readonly uniform image2D imgh0;
layout(binding = 1, rg32f) writeonly uniform image2D imgh;
layout(binding = 2, rg32f) writeonly uniform image2D imghdx;
layout(binding = 3, rg32f) writeonly uniform image2D imghdz;

uniform float time;
uniform float fftSize;
uniform float waterScale;

const float PI = 3.14159265359;
const float TWO_PI = 2.*3.14159265359;
const float INV_SQRT2 = 1./sqrt(2.);
const float GRAV = 9.82;
const float DEPTH = 10;

float uhash12(uvec2 x)
{
	uvec2 q = 1103515245U * ((x >> 1U) ^ (uvec2(x.y, x.x)));
	uint  n = 1103515245U * ((q.x) ^ (q.y >> 3U));
	return float(n) * (1.0 / float(0xffffffffU));
}
float hash12(vec2 x) { return uhash12(uvec2((ivec2(500.*x) + 1073741824))); }

// https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
vec2 gauss(vec2 uv)
{
	float u0 = hash12(uv);
	float u1 = hash12(uv + 100);
	return sqrt(-2. * log(u0))*vec2(cos(2*PI * u1), sin(2*PI*u1));
}

float Ph(vec2 kvec)
{
	// wave height roughly 
	float A = 100000;
	float k = length(kvec);
	vec2 nk = normalize(kvec);
	if(k < 0.0001) {
		k = 0.0001;
		nk = vec2(0);
	}
	// wind speed
	float V = 31;
	float L = V*V/GRAV;
	// small waves cutoff
	float l = 0.0;
	// wind direction
	vec2 w = normalize(vec2(0,1));
	
	float alignment = 10;
	float result = A*exp(-1.0/(k*k*L*L))*pow(abs(dot(nk,w)),alignment)/pow(k, 4);
	return result*exp(-k*k*l*l) ;
}

// e^(i*x)
vec2 cexp(float x)
{
	return vec2(cos(x), sin(x));
}

// https://shadertoyunofficial.wordpress.com/2016/07/21/usual-tricks-in-shadertoyglsl/
vec2 cmult(vec2 a, vec2 b)
{
	return mat2(a,-a.y,a.x) * b;
}

vec2 conj(vec2 c)
{
	return vec2(c.x,-c.y);
}

float w(float k)
{
	//const float repeatTime = 100.0;
	//const float w0 = 2*PI/repeatTime;
	float w = sqrt(GRAV * k);
	//float w = sqrt(GRAV * k * tanh(k * DEPTH);
	//w = floor(w/w0)*w0;
	return w;
}

vec2 hFA0(vec2 uv)
{
	vec2 rand = gauss(uv);
	return INV_SQRT2 * rand * sqrt(Ph(uv));
}


void main()
{
	ivec2 i = ivec2(gl_GlobalInvocationID.xy);
	
	int N = int(fftSize);
	vec2 uv = 2*PI*(vec2(i) - 0.5*fftSize)/waterScale;
	float k = length(uv);
	if(k < 0.00001)
		k = 0.00001;

#if 1
	vec2 h0 = imageLoad(imgh0, i).xy;
	vec2 mh0 = imageLoad(imgh0, ivec2(N)-i).xy;
#else
	vec2 h0 = hFA0(uv);
	vec2 mh0 = hFA0(-uv);
#endif
	vec4 result = vec4(0);
	result.xy += cmult(h0, cexp(w(k)*time));
	result.xy += 0.1*cmult(conj(mh0), cexp(-w(k)*time));


	// hack to get water moving in one direction
	vec2 w = vec2(0,1);
	float t =0.0;
	result.xy *= (t + (1.0-t)*smoothstep(-0,0, dot(uv, w)));
	
	
	vec2 hdx = cmult(vec2(0, -uv.x/k), result.xy);

	vec2 hdz = cmult(vec2(0, -uv.y/k), result.xy);

	//result.xy += cmult(conj(mh0), cexp(-w(k)*time));

	//result.xy = h0;

	imageStore(imgh, i, result);

	imageStore(imghdx, i, vec4(hdx, 0,0));
	imageStore(imghdz, i, vec4(hdz, 0,0));
}