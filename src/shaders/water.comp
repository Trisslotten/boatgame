#version 440 core

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, rgba32f) uniform image2D dispImg;
layout(binding = 1, rg32f) readonly uniform image2D butterflyResult;
layout(binding = 2, rg32f) readonly uniform image2D butterflydxResult;
layout(binding = 3, rg32f) readonly uniform image2D butterflydzResult;

uniform float fftSize;
uniform float waterSize;
uniform float waterScale;

uniform int channel;

const float PI = 3.14159265359;
const float INV_SQRT2 = 1./sqrt(2.);
const float GRAV = 9.82;
const float DEPTH = 10;


// e^(i*x)
vec2 cexp(float x)
{
	return vec2(cos(x), sin(x));
}

// https://shadertoyunofficial.wordpress.com/2016/07/21/usual-tricks-in-shadertoyglsl/
vec2 cmult(vec2 a, vec2 b)
{
	return mat2(a,-a.y,a.x) * b;
}

vec2 conj(vec2 c)
{
	return vec2(c.x,-c.y);
}


void main()
{
	ivec2 i = ivec2(gl_GlobalInvocationID.xy);
	vec4 dispacement = vec4(0);

	float perm = 1.0-2.0*mod(i.x+i.y,2);

	float heightScale = 4.0;
	float choppiness = 10.0;

	dispacement.y = heightScale*perm*imageLoad(butterflyResult, i).x / (fftSize*fftSize);
	dispacement.x = -choppiness*perm*imageLoad(butterflydxResult, i).x / (fftSize*fftSize);
	dispacement.z = -choppiness*perm*imageLoad(butterflydzResult, i).x / (fftSize*fftSize);

	imageStore(dispImg, i, dispacement);
}